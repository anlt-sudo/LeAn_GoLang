package main

import (
	"fmt"
	"sync"
)

func main() {
	var wg sync.WaitGroup
	var counter int = 0

	// Tạo một channel để nhận các "tín hiệu" tăng
	incrementCh := make(chan bool)

	// Goroutine quản lý: goroutine duy nhất được phép chạm vào 'counter'
	go func() {
		for range incrementCh {
			counter++
		}
	}()

	// Bắt đầu 1000 goroutine, mỗi goroutine gửi một tín hiệu
	for i := 0; i < 1000; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			// Gửi một tín hiệu vào channel để yêu cầu tăng
			incrementCh <- true
		}()
	}

	wg.Wait()
	close(incrementCh) // Đóng channel để goroutine quản lý kết thúc

	// Kết quả cũng sẽ luôn là 1000
	fmt.Printf("Giá trị cuối cùng của counter: %d\n", counter)
}
* Mặc dù cách này có vẻ dài hơn cho ví dụ đơn giản này, nhưng nó cực kỳ mạnh mẽ cho các hệ thống phức tạp hơn, vì nó tránh được
 các vấn đề liên quan đến khóa (như deadlock) và làm cho luồng dữ liệu trở nên rõ ràng hơn.