// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	model "go-shop-api/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: email, password
func (_m *IAuthService) Authenticate(email string, password string) (string, string, *model.User, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 string
	var r1 string
	var r2 *model.User
	var r3 error
	if rf, ok := ret.Get(0).(func(string, string) (string, string, *model.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) *model.User); ok {
		r2 = rf(email, password)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*model.User)
		}
	}

	if rf, ok := ret.Get(3).(func(string, string) error); ok {
		r3 = rf(email, password)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ComparePassword provides a mock function with given fields: hash, plain
func (_m *IAuthService) ComparePassword(hash string, plain string) error {
	ret := _m.Called(hash, plain)

	if len(ret) == 0 {
		panic("no return value specified for ComparePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hash, plain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashPassword provides a mock function with given fields: plain
func (_m *IAuthService) HashPassword(plain string) (string, error) {
	ret := _m.Called(plain)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(plain)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(plain)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(plain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: userID
func (_m *IAuthService) Logout(userID uint) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: refreshToken
func (_m *IAuthService) RefreshToken(refreshToken string) (string, string, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(refreshToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: email, password, role
func (_m *IAuthService) Register(email string, password string, role string) (*model.User, error) {
	ret := _m.Called(email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*model.User, error)); ok {
		return rf(email, password, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *model.User); ok {
		r0 = rf(email, password, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(email, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
