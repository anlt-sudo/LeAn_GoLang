Giới thiệu Package, Import

1. Package và Import
* Package
    - Trong Go, code được tổ chức thành các package. Mỗi tệp mã nguồn Go đều phải thuộc về một package, được khai báo ở đầu tệp bằng từ khóa package.[1][2]
    Package main: Đây là một package đặc biệt. Nó định nghĩa một chương trình có thể thực thi được, và hàm main() bên trong package này sẽ là điểm khởi đầu của chương trình.[1]
    Tổ chức code: Packages giúp bạn module hóa mã nguồn, làm cho nó dễ đọc, dễ bảo trì và tái sử dụng hơn.[1][2]
* Export (Xuất): Các định danh (hàm, biến, hằng số, kiểu dữ liệu) được viết hoa chữ cái đầu sẽ được "xuất" ra ngoài. Điều này có nghĩa là các package khác có thể import và sử dụng chúng. Các định danh viết thường sẽ không được xuất và chỉ có thể sử dụng bên trong cùng một package.[1][3]
* Import
    - Để sử dụng code từ một package khác, bạn cần "import" nó bằng từ khóa import.[4]
    Cú pháp: Bạn có thể import từng package riêng lẻ hoặc import một nhóm các package.[5]
    Đường dẫn import: Chuỗi ký tự trong câu lệnh import được gọi là đường dẫn import. Nó xác định package nào sẽ được import.[5] Đối với các package trong thư viện chuẩn của Go, bạn chỉ cần dùng tên ngắn gọn như "fmt" hay "math/rand".[6][7] Đối với các package của bên thứ ba, đường dẫn này thường là URL của kho mã nguồn, ví dụ: "github.com/sirupsen/logrus".[8]
    Sử dụng: Sau khi import, tên package sẽ được dùng để truy cập các thành phần đã được export từ package đó. Ví dụ, sau khi import "fmt", bạn có thể gọi hàm Println bằng cách viết fmt.Println().[7][9]

