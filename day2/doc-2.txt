2. Go Modules
    - Go Modules là hệ thống quản lý dependency (các thư viện phụ thuộc) chính thức của Go, 
    được giới thiệu từ phiên bản Go 1.11.[10][11] Một module về cơ bản là một tập hợp các 
    package Go được phiên bản hóa cùng nhau.[11][12] Go Modules cho phép bạn đặt dự án ở 
    bất kỳ đâu trên máy tính mà không cần phụ thuộc vào GOPATH như trước đây.[13]
    
    - File go.mod là trung tâm của một module. Nó định nghĩa đường dẫn của module và liệt kê 
    tất cả các dependency cần thiết.[8][10]
* go mod init
    - Lệnh này dùng để khởi tạo một module mới.[10][14]
    - Chức năng: go mod init tạo ra một tệp go.mod trong thư mục hiện tại, đánh dấu đây 
      là thư mục gốc của một module.[12][13]
    - Cách dùng: Bạn cần cung cấp một đường dẫn module, thường là URL của kho chứa mã nguồn của bạn.
    - Ex: go mod init github.com/ten-cua-ban/ten-du-an

* Lệnh go get được dùng để quản lý các dependency.[14]
    - Chức năng: Nó có thể thêm, cập nhật hoặc xóa các dependency trong tệp go.mod của bạn.[14][15] 
      Khi bạn go get một package, Go sẽ tự động tải mã nguồn của package đó về máy.[15][16]
    - Cách dùng:
        + Để thêm một dependency mới hoặc cập nhật lên phiên bản mới nhất: go get github.com/gorilla/mux
        + Để tải một phiên bản cụ thể: go get github.com/gorilla/mux@v1.8.0
        * Lưu ý: Kể từ các phiên bản Go gần đây, vai trò của go get đã thay đổi. Nó chủ yếu dùng để điều 
          chỉnh các dependency trong go.mod. Để cài đặt các tệp thực thi, lệnh go install được khuyến khích sử dụng.[17][18]

* go mod tidy
    - Lệnh này dùng để "dọn dẹp" tệp go.mod và go.sum.
    - Chức năng: go mod tidy đảm bảo rằng tệp go.mod khớp với mã nguồn trong dự án của bạn.[19][20] Nó sẽ:
        + Thêm các module còn thiếu mà code của bạn cần để build.[19][21]
        + Loại bỏ các module không được sử dụng.[19][21]
        + Cập nhật tệp go.sum, nơi chứa checksum của các dependency để đảm bảo tính toàn vẹn.[8][19]
    - Cách dùng:
        + go mod tidy